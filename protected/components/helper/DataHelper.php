<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of DataHelper
 *
 * @author Administrator
 */
class DataHelper {
    
    public static function getListData($rs, $col, $criteria = null, $arrSearch = null){
        
        $offset = Helper::ReplaceEmpty("start", 0);
        $limit = Helper::ReplaceEmpty("length", 100);
        $draw = Helper::ReplaceEmpty("draw", 1);
        $search = Helper::ReplaceEmpty("search", "");
        $columns = Helper::ReplaceEmpty("columns", "");
        $order = Helper::ReplaceEmpty("order", "");

        $orderColIndex = $order[0]['column'];
        $orderDir = $order[0]['dir'];
        $orderColName = $columns[$orderColIndex]['data'];
        
        if ($search['value'] != ''){
            if (is_array($arrSearch)){
                foreach($arrSearch as $srch){
                    $criteria->compare($srch, $search['value'], true, 'OR');
                }
            }            
        }              
        
        $recordsTotal = $rs->count($criteria);
        $criteria->offset = $offset;
        $criteria->limit = $limit;
        
        if (strpos($orderColName, ".") === false){            
            $criteria->order = "t.$orderColName $orderDir";
        }
        else {
            $criteria->order = "$orderColName $orderDir";     
        }

        $dataProvider=new CActiveDataProvider($rs, array(
            'criteria'=>$criteria,
            'pagination'=>array(
                'currentPage' => $offset/10,
                'pageSize'=>$limit
            )
        ));        
        
        // print_r($criteria);
      
        $data = Jsonize::arr($dataProvider->data, $col);
        $json = array("draw" => $draw, "recordsTotal" => $recordsTotal, "recordsFiltered" => $recordsTotal, "data" => $data);
        
        return json_encode($json); 
        
    }    

    public static function getAuthToken($userId){
        if (is_numeric($userId)){
            $cond = "t.id = '" . $userId . "' AND t.status_id = 1 AND t.is_verified = 1";
        }
        else {
            $cond = "t.username = '" . $userId . "' AND t.status_id = 1 AND t.is_verified = 1";
        }

        $col = array('id', 'account_id', 'first_name', 'last_name', 'userGroup' => array('id', 'name'));
        $rs = MyUser::model()->with(array('account','userGroup'))->find($cond);

        if ($rs) {
            if ($rs->account['is_verified'] == 1 && $rs->account['status_id'] == 1) {
                $token = array(
                    "iss" => "http://example.org",
                    "aud" => "http://example.com",
                    "iat" => time(),
                    "nbf" => time(),
                    "uid" => $rs->id,
                    "utype" => $rs->userGroup['tplkey'],
                    "rs" => Jsonize::arr($rs, $col),
                    "otherData" => $rs->first_name . ' ' . $rs->last_name
                );

                $jwt = JWT::encode($token, Helper::YiiParam("jwtKey"));

                return $jwt;
            }
        }
        return false;
     }
     
    public static function getCol($num) {
        $numeric = ($num - 1) % 26;
        $letter = chr(65 + $numeric);
        $num2 = intval(($num - 1) / 26);
        if ($num2 > 0) {
            return DataHelper::getCol($num2) . $letter;
        } else {
            return $letter;
        }
    }
     
     public static function exportToExcel($headings, $data, $fileName){
        $excel = Yii::app()->PHPExcel;
        $objPHPExcel = $excel->createPHPExcel();
        $objPHPExcel->getProperties()->setCreator("Prakash Khandelwal")
                                    ->setLastModifiedBy("Prakash Khandelwal")
                                    ->setTitle("Account Admin Report - JAP Express")
                                    ->setSubject("Account Admin Report - JAP Express")
                                    ->setDescription("Account Admin Report for JAP Express generated by Infovinity Autotracker")
                                    ->setKeywords("account admin report japexpress infovinity prakash")
                                    ->setCategory("JAP Express Autotracker");
        
        $objPHPExcel->setActiveSheetIndex(0);
	$sheet = $objPHPExcel->getActiveSheet();
        
        $i = 0;
        $Row = "1";
        foreach ($headings as $heading){
            $i = $i+1;
            $Col = DataHelper::getCol($i);
            
            $sheet->setCellValue($Col . $Row, $heading);
            $sheet->getStyle($Col . $Row)->getFont()->setBold(true);
        }
        
        
        $Row = 2;
        foreach ($data as $d){
            $i = 0;
            foreach ($d as $val){
                $i = $i+1;
                $Col = DataHelper::getCol($i);
                
                $sheet->setCellValue($Col . $Row, $val);
                $sheet->getStyle($Col . $Row)->getFont()->setBold(false);
            }
            $Row++;
        }
        
        $Row++;
        
        header('Content-Type: application/vnd.ms-excel');
	header('Content-Disposition: attachment;filename="' . $fileName . '_' . date("d-M-Y_H-i-s") . '.xls"');
	header('Cache-Control: max-age=0');
	// If you're serving to IE 9, then the following may be needed
	header('Cache-Control: max-age=1');

	// If you're serving to IE over SSL, then the following may be needed
	header ('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
	header ('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); // always modified
	header ('Cache-Control: cache, must-revalidate'); // HTTP/1.1
	header ('Pragma: public'); // HTTP/1.0
	

	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
	$objWriter->save('php://output');
	exit();
        
        
     }
}
